//
//  StockInteractor.swift
//  StockMonitoring
//
//  Created by Александр on 30.03.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol StockBusinessLogic
{
    func makeRequest(request: Stock.Model.Request.RequestType)
}

protocol StockDataStore
{
  //var name: String { get set }
}

class StockInteractor: StockBusinessLogic, StockDataStore
{
  var presenter: StockPresentationLogic?
  var worker: StockWorker?
  //var name: String = ""
    
    private var fetcher: DataFetcher = NetworkDataFetcher(networking: NetworkService())
  
  // MARK: Do something
  
    func makeRequest(request: Stock.Model.Request.RequestType)
  {
        if worker == nil {
            worker = StockWorker()
            worker?.doSomeWork()

        }
    
//        presenter?.presentData(response: .presentStocks)
        
        switch request {
        
        case .getStocks:
            print("getStock interactor")
            fetcher.getMostWatchedResponse { [ weak self ](stocksResponse) in
                guard let stocksResponse = stocksResponse else { return }
                self?.presenter?.presentData(response: .presentStocks(stocksResponse: stocksResponse))
            }
        }
  }
}
