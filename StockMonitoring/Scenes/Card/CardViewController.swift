//
//  CardViewController.swift
//  StockMonitoring
//
//  Created by Александр on 18.04.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CardDisplayLogic: class
{
    func displayStock(viewModel: Card.GetStock.ViewModel)
}

class CardViewController: UIViewController, CardDisplayLogic
{
    @IBOutlet weak var priceLabel: UILabel!
    @IBOutlet weak var priceChangeLabel: UILabel!
    @IBOutlet weak var pricePercentChangeLabel: UILabel!
    var interactor: CardBusinessLogic?
    var router: (NSObjectProtocol & CardRoutingLogic & CardDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = CardInteractor()
        let presenter = CardPresenter()
        let router = CardRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        getStock()
        navigationController?.isNavigationBarHidden = true
        navigationController?.navigationBar.transform = .init(translationX: 0, y: 0)
        navigationController?.isNavigationBarHidden = false
    }
    
    // MARK: Do something
    
    
    func getStock()
    {
        let request = Card.GetStock.Request()
        interactor?.getStock(request: request)
    }
    
    func stockIsFavouriteChange()
    {
        let request = Card.StockIsFavouriteChange.Request()
        interactor?.stockIsFavouriteChange(request:request)
    }
    
    func displayStock(viewModel: Card.GetStock.ViewModel)
    {
        let displayedOrder = viewModel.displayedStock
        
        var price = "-"
        
        if let _price = displayedOrder.regularMarketPrice {
            price = "$" + String(_price)
        }
        if let change = displayedOrder.regularMarketChange {
            if change < 0 {
                priceChangeLabel.textColor = UIColor(red: 178/255, green: 36/255, blue: 36/255, alpha: 1)
                priceChangeLabel.text = "-$" + String(abs(change))
            } else {
                priceChangeLabel.textColor = UIColor(red: 36/255, green: 178/255, blue: 93/255, alpha: 1)
                priceChangeLabel.text = "+$" + String(change)
            }
        } else {
            priceChangeLabel.text = "-"
        }
        
        if let changePercent = displayedOrder.regularMarketChangePercent {
            pricePercentChangeLabel.text = "(" + String(abs(changePercent)) + "%" + ")"
            if changePercent < 0 {
                pricePercentChangeLabel.textColor = UIColor(red: 178/255, green: 36/255, blue: 36/255, alpha: 1)
            } else {
                pricePercentChangeLabel.textColor = UIColor(red: 36/255, green: 178/255, blue: 93/255, alpha: 1)
            }
        } else {
            pricePercentChangeLabel.text = "-"
        }
        priceLabel.text = price
        
        let size = displayedOrder.title?.size()
        guard let width = size?.width else { return }
        guard let height = navigationController?.navigationBar.frame.size.height else {return}
        let titleLabel = UILabel(frame: CGRect(x: 0,y: 0, width: width, height: height))
        titleLabel.attributedText = displayedOrder.title
        titleLabel.numberOfLines = 0
        titleLabel.textAlignment = .center
        navigationItem.titleView = titleLabel
        if displayedOrder.isFavourite {
            navigationItem.rightBarButtonItem?.image = UIImage(named: "Star 1")
            navigationItem.rightBarButtonItem?.tintColor = UIColor(red: 255/255, green: 202/255, blue: 28/255, alpha: 1)
            
        } else if displayedOrder.isFavourite == false {
            navigationItem.rightBarButtonItem?.image = UIImage(named: "Star 1")
            navigationItem.rightBarButtonItem?.tintColor = UIColor(red: 9/255, green: 20/255, blue: 31/255, alpha: 1)
        }
    }
    
    @IBAction func returnButtonPressing(_ sender: UIBarButtonItem) {
        self.navigationController?.isNavigationBarHidden = true
        router?.routeToStock(segue: nil)
    }
    @IBAction func favouriteButtonPressing(_ sender: UIBarButtonItem) {
        stockIsFavouriteChange()
    }
}
